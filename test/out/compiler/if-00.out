--- parse tree ---
[ Code
    "typ/compiler/if-00.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "typ/compiler/if-00.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "typ/compiler/if-00.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Code
    "typ/compiler/if-00.typ"
    ( line 3 , column 2 )
    (If
       [ ( LessThan (Literal (Int 1)) (Literal (Int 2))
         , Block (Content [ SoftBreak , Text "One" , Text "." , ParBreak ])
         )
       ])
, ParBreak
, Code
    "typ/compiler/if-00.typ"
    ( line 7 , column 2 )
    (If
       [ ( Equals (Literal (Boolean True)) (Literal (Boolean False))
         , Block
             (Content
                [ SoftBreak
                , Text "{Bad},"
                , Space
                , Text "but"
                , Space
                , Text "we"
                , Space
                , Text "{dont"
                , Text "-"
                , Text "care}!"
                , ParBreak
                ])
         )
       ])
, ParBreak
]
--- evaluated ---
document(body: { text(body: [
]), 
                 text(body: [
One.]), 
                 parbreak(), 
                 parbreak(), 
                 parbreak() })
